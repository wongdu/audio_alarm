// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: alarm.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_alarm_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_alarm_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3015000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3015008 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_alarm_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_alarm_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxiliaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[2]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const ::PROTOBUF_NAMESPACE_ID::uint32 offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_alarm_2eproto;
::PROTOBUF_NAMESPACE_ID::Metadata descriptor_table_alarm_2eproto_metadata_getter(int index);
namespace audioalarm {
namespace v1 {
class AlarmReply;
struct AlarmReplyDefaultTypeInternal;
extern AlarmReplyDefaultTypeInternal _AlarmReply_default_instance_;
class AlarmRequest;
struct AlarmRequestDefaultTypeInternal;
extern AlarmRequestDefaultTypeInternal _AlarmRequest_default_instance_;
}  // namespace v1
}  // namespace audioalarm
PROTOBUF_NAMESPACE_OPEN
template<> ::audioalarm::v1::AlarmReply* Arena::CreateMaybeMessage<::audioalarm::v1::AlarmReply>(Arena*);
template<> ::audioalarm::v1::AlarmRequest* Arena::CreateMaybeMessage<::audioalarm::v1::AlarmRequest>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace audioalarm {
namespace v1 {

enum CameraType : int {
  Unknown = 0,
  DaHua = 1,
  HiK = 2,
  CameraType_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::min(),
  CameraType_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::max()
};
bool CameraType_IsValid(int value);
constexpr CameraType CameraType_MIN = Unknown;
constexpr CameraType CameraType_MAX = HiK;
constexpr int CameraType_ARRAYSIZE = CameraType_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* CameraType_descriptor();
template<typename T>
inline const std::string& CameraType_Name(T enum_t_value) {
  static_assert(::std::is_same<T, CameraType>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function CameraType_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    CameraType_descriptor(), enum_t_value);
}
inline bool CameraType_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, CameraType* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<CameraType>(
    CameraType_descriptor(), name, value);
}
enum ResponseCode : int {
  Ok_200 = 0,
  Err_Message_Id_Not_Set = 1,
  Err_Camera_Unsupported = 2,
  Err_Device_Not_Found = 3,
  Err_Device_Login_Incomplete = 4,
  Err_Audio_File_Incomplete = 5,
  Err_Play_Time_Error = 6,
  Err_500 = 7,
  ResponseCode_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::min(),
  ResponseCode_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::max()
};
bool ResponseCode_IsValid(int value);
constexpr ResponseCode ResponseCode_MIN = Ok_200;
constexpr ResponseCode ResponseCode_MAX = Err_500;
constexpr int ResponseCode_ARRAYSIZE = ResponseCode_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* ResponseCode_descriptor();
template<typename T>
inline const std::string& ResponseCode_Name(T enum_t_value) {
  static_assert(::std::is_same<T, ResponseCode>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function ResponseCode_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    ResponseCode_descriptor(), enum_t_value);
}
inline bool ResponseCode_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, ResponseCode* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<ResponseCode>(
    ResponseCode_descriptor(), name, value);
}
enum PlayTimeType : int {
  UnSupported = 0,
  Count = 1,
  Duration = 2,
  PlayTimeType_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::min(),
  PlayTimeType_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::max()
};
bool PlayTimeType_IsValid(int value);
constexpr PlayTimeType PlayTimeType_MIN = UnSupported;
constexpr PlayTimeType PlayTimeType_MAX = Duration;
constexpr int PlayTimeType_ARRAYSIZE = PlayTimeType_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* PlayTimeType_descriptor();
template<typename T>
inline const std::string& PlayTimeType_Name(T enum_t_value) {
  static_assert(::std::is_same<T, PlayTimeType>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function PlayTimeType_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    PlayTimeType_descriptor(), enum_t_value);
}
inline bool PlayTimeType_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, PlayTimeType* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<PlayTimeType>(
    PlayTimeType_descriptor(), name, value);
}
// ===================================================================

class AlarmRequest PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:audioalarm.v1.AlarmRequest) */ {
 public:
  inline AlarmRequest() : AlarmRequest(nullptr) {}
  virtual ~AlarmRequest();
  explicit constexpr AlarmRequest(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  AlarmRequest(const AlarmRequest& from);
  AlarmRequest(AlarmRequest&& from) noexcept
    : AlarmRequest() {
    *this = ::std::move(from);
  }

  inline AlarmRequest& operator=(const AlarmRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline AlarmRequest& operator=(AlarmRequest&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const AlarmRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const AlarmRequest* internal_default_instance() {
    return reinterpret_cast<const AlarmRequest*>(
               &_AlarmRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(AlarmRequest& a, AlarmRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(AlarmRequest* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(AlarmRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline AlarmRequest* New() const final {
    return CreateMaybeMessage<AlarmRequest>(nullptr);
  }

  AlarmRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<AlarmRequest>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const AlarmRequest& from);
  void MergeFrom(const AlarmRequest& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(AlarmRequest* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "audioalarm.v1.AlarmRequest";
  }
  protected:
  explicit AlarmRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    return ::descriptor_table_alarm_2eproto_metadata_getter(kIndexInFileMessages);
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kDevIpFieldNumber = 3,
    kUserNameFieldNumber = 5,
    kUserPasswordFieldNumber = 6,
    kDownloadUrlFieldNumber = 7,
    kFileNameFieldNumber = 8,
    kMd5ValueFieldNumber = 9,
    kMsgIdFieldNumber = 1,
    kCameraTypeFieldNumber = 2,
    kDevPortFieldNumber = 4,
    kPlayTimeTypeFieldNumber = 10,
    kPlayTimeFieldNumber = 11,
  };
  // string dev_ip = 3;
  void clear_dev_ip();
  const std::string& dev_ip() const;
  void set_dev_ip(const std::string& value);
  void set_dev_ip(std::string&& value);
  void set_dev_ip(const char* value);
  void set_dev_ip(const char* value, size_t size);
  std::string* mutable_dev_ip();
  std::string* release_dev_ip();
  void set_allocated_dev_ip(std::string* dev_ip);
  private:
  const std::string& _internal_dev_ip() const;
  void _internal_set_dev_ip(const std::string& value);
  std::string* _internal_mutable_dev_ip();
  public:

  // string user_name = 5;
  void clear_user_name();
  const std::string& user_name() const;
  void set_user_name(const std::string& value);
  void set_user_name(std::string&& value);
  void set_user_name(const char* value);
  void set_user_name(const char* value, size_t size);
  std::string* mutable_user_name();
  std::string* release_user_name();
  void set_allocated_user_name(std::string* user_name);
  private:
  const std::string& _internal_user_name() const;
  void _internal_set_user_name(const std::string& value);
  std::string* _internal_mutable_user_name();
  public:

  // string user_password = 6;
  void clear_user_password();
  const std::string& user_password() const;
  void set_user_password(const std::string& value);
  void set_user_password(std::string&& value);
  void set_user_password(const char* value);
  void set_user_password(const char* value, size_t size);
  std::string* mutable_user_password();
  std::string* release_user_password();
  void set_allocated_user_password(std::string* user_password);
  private:
  const std::string& _internal_user_password() const;
  void _internal_set_user_password(const std::string& value);
  std::string* _internal_mutable_user_password();
  public:

  // string download_url = 7;
  void clear_download_url();
  const std::string& download_url() const;
  void set_download_url(const std::string& value);
  void set_download_url(std::string&& value);
  void set_download_url(const char* value);
  void set_download_url(const char* value, size_t size);
  std::string* mutable_download_url();
  std::string* release_download_url();
  void set_allocated_download_url(std::string* download_url);
  private:
  const std::string& _internal_download_url() const;
  void _internal_set_download_url(const std::string& value);
  std::string* _internal_mutable_download_url();
  public:

  // string file_name = 8;
  void clear_file_name();
  const std::string& file_name() const;
  void set_file_name(const std::string& value);
  void set_file_name(std::string&& value);
  void set_file_name(const char* value);
  void set_file_name(const char* value, size_t size);
  std::string* mutable_file_name();
  std::string* release_file_name();
  void set_allocated_file_name(std::string* file_name);
  private:
  const std::string& _internal_file_name() const;
  void _internal_set_file_name(const std::string& value);
  std::string* _internal_mutable_file_name();
  public:

  // string md5_value = 9;
  void clear_md5_value();
  const std::string& md5_value() const;
  void set_md5_value(const std::string& value);
  void set_md5_value(std::string&& value);
  void set_md5_value(const char* value);
  void set_md5_value(const char* value, size_t size);
  std::string* mutable_md5_value();
  std::string* release_md5_value();
  void set_allocated_md5_value(std::string* md5_value);
  private:
  const std::string& _internal_md5_value() const;
  void _internal_set_md5_value(const std::string& value);
  std::string* _internal_mutable_md5_value();
  public:

  // uint32 msg_id = 1;
  void clear_msg_id();
  ::PROTOBUF_NAMESPACE_ID::uint32 msg_id() const;
  void set_msg_id(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_msg_id() const;
  void _internal_set_msg_id(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // .audioalarm.v1.CameraType camera_type = 2;
  void clear_camera_type();
  ::audioalarm::v1::CameraType camera_type() const;
  void set_camera_type(::audioalarm::v1::CameraType value);
  private:
  ::audioalarm::v1::CameraType _internal_camera_type() const;
  void _internal_set_camera_type(::audioalarm::v1::CameraType value);
  public:

  // uint32 dev_port = 4;
  void clear_dev_port();
  ::PROTOBUF_NAMESPACE_ID::uint32 dev_port() const;
  void set_dev_port(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_dev_port() const;
  void _internal_set_dev_port(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // .audioalarm.v1.PlayTimeType play_time_type = 10;
  void clear_play_time_type();
  ::audioalarm::v1::PlayTimeType play_time_type() const;
  void set_play_time_type(::audioalarm::v1::PlayTimeType value);
  private:
  ::audioalarm::v1::PlayTimeType _internal_play_time_type() const;
  void _internal_set_play_time_type(::audioalarm::v1::PlayTimeType value);
  public:

  // uint32 play_time = 11;
  void clear_play_time();
  ::PROTOBUF_NAMESPACE_ID::uint32 play_time() const;
  void set_play_time(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_play_time() const;
  void _internal_set_play_time(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // @@protoc_insertion_point(class_scope:audioalarm.v1.AlarmRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr dev_ip_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr user_name_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr user_password_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr download_url_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr file_name_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr md5_value_;
  ::PROTOBUF_NAMESPACE_ID::uint32 msg_id_;
  int camera_type_;
  ::PROTOBUF_NAMESPACE_ID::uint32 dev_port_;
  int play_time_type_;
  ::PROTOBUF_NAMESPACE_ID::uint32 play_time_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_alarm_2eproto;
};
// -------------------------------------------------------------------

class AlarmReply PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:audioalarm.v1.AlarmReply) */ {
 public:
  inline AlarmReply() : AlarmReply(nullptr) {}
  virtual ~AlarmReply();
  explicit constexpr AlarmReply(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  AlarmReply(const AlarmReply& from);
  AlarmReply(AlarmReply&& from) noexcept
    : AlarmReply() {
    *this = ::std::move(from);
  }

  inline AlarmReply& operator=(const AlarmReply& from) {
    CopyFrom(from);
    return *this;
  }
  inline AlarmReply& operator=(AlarmReply&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const AlarmReply& default_instance() {
    return *internal_default_instance();
  }
  static inline const AlarmReply* internal_default_instance() {
    return reinterpret_cast<const AlarmReply*>(
               &_AlarmReply_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(AlarmReply& a, AlarmReply& b) {
    a.Swap(&b);
  }
  inline void Swap(AlarmReply* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(AlarmReply* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline AlarmReply* New() const final {
    return CreateMaybeMessage<AlarmReply>(nullptr);
  }

  AlarmReply* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<AlarmReply>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const AlarmReply& from);
  void MergeFrom(const AlarmReply& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(AlarmReply* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "audioalarm.v1.AlarmReply";
  }
  protected:
  explicit AlarmReply(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    return ::descriptor_table_alarm_2eproto_metadata_getter(kIndexInFileMessages);
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kMessageFieldNumber = 2,
    kCodeFieldNumber = 1,
  };
  // string message = 2;
  void clear_message();
  const std::string& message() const;
  void set_message(const std::string& value);
  void set_message(std::string&& value);
  void set_message(const char* value);
  void set_message(const char* value, size_t size);
  std::string* mutable_message();
  std::string* release_message();
  void set_allocated_message(std::string* message);
  private:
  const std::string& _internal_message() const;
  void _internal_set_message(const std::string& value);
  std::string* _internal_mutable_message();
  public:

  // .audioalarm.v1.ResponseCode code = 1;
  void clear_code();
  ::audioalarm::v1::ResponseCode code() const;
  void set_code(::audioalarm::v1::ResponseCode value);
  private:
  ::audioalarm::v1::ResponseCode _internal_code() const;
  void _internal_set_code(::audioalarm::v1::ResponseCode value);
  public:

  // @@protoc_insertion_point(class_scope:audioalarm.v1.AlarmReply)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr message_;
  int code_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_alarm_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// AlarmRequest

// uint32 msg_id = 1;
inline void AlarmRequest::clear_msg_id() {
  msg_id_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 AlarmRequest::_internal_msg_id() const {
  return msg_id_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 AlarmRequest::msg_id() const {
  // @@protoc_insertion_point(field_get:audioalarm.v1.AlarmRequest.msg_id)
  return _internal_msg_id();
}
inline void AlarmRequest::_internal_set_msg_id(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  msg_id_ = value;
}
inline void AlarmRequest::set_msg_id(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_msg_id(value);
  // @@protoc_insertion_point(field_set:audioalarm.v1.AlarmRequest.msg_id)
}

// .audioalarm.v1.CameraType camera_type = 2;
inline void AlarmRequest::clear_camera_type() {
  camera_type_ = 0;
}
inline ::audioalarm::v1::CameraType AlarmRequest::_internal_camera_type() const {
  return static_cast< ::audioalarm::v1::CameraType >(camera_type_);
}
inline ::audioalarm::v1::CameraType AlarmRequest::camera_type() const {
  // @@protoc_insertion_point(field_get:audioalarm.v1.AlarmRequest.camera_type)
  return _internal_camera_type();
}
inline void AlarmRequest::_internal_set_camera_type(::audioalarm::v1::CameraType value) {
  
  camera_type_ = value;
}
inline void AlarmRequest::set_camera_type(::audioalarm::v1::CameraType value) {
  _internal_set_camera_type(value);
  // @@protoc_insertion_point(field_set:audioalarm.v1.AlarmRequest.camera_type)
}

// string dev_ip = 3;
inline void AlarmRequest::clear_dev_ip() {
  dev_ip_.ClearToEmpty();
}
inline const std::string& AlarmRequest::dev_ip() const {
  // @@protoc_insertion_point(field_get:audioalarm.v1.AlarmRequest.dev_ip)
  return _internal_dev_ip();
}
inline void AlarmRequest::set_dev_ip(const std::string& value) {
  _internal_set_dev_ip(value);
  // @@protoc_insertion_point(field_set:audioalarm.v1.AlarmRequest.dev_ip)
}
inline std::string* AlarmRequest::mutable_dev_ip() {
  // @@protoc_insertion_point(field_mutable:audioalarm.v1.AlarmRequest.dev_ip)
  return _internal_mutable_dev_ip();
}
inline const std::string& AlarmRequest::_internal_dev_ip() const {
  return dev_ip_.Get();
}
inline void AlarmRequest::_internal_set_dev_ip(const std::string& value) {
  
  dev_ip_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void AlarmRequest::set_dev_ip(std::string&& value) {
  
  dev_ip_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:audioalarm.v1.AlarmRequest.dev_ip)
}
inline void AlarmRequest::set_dev_ip(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  dev_ip_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:audioalarm.v1.AlarmRequest.dev_ip)
}
inline void AlarmRequest::set_dev_ip(const char* value,
    size_t size) {
  
  dev_ip_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:audioalarm.v1.AlarmRequest.dev_ip)
}
inline std::string* AlarmRequest::_internal_mutable_dev_ip() {
  
  return dev_ip_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* AlarmRequest::release_dev_ip() {
  // @@protoc_insertion_point(field_release:audioalarm.v1.AlarmRequest.dev_ip)
  return dev_ip_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void AlarmRequest::set_allocated_dev_ip(std::string* dev_ip) {
  if (dev_ip != nullptr) {
    
  } else {
    
  }
  dev_ip_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), dev_ip,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:audioalarm.v1.AlarmRequest.dev_ip)
}

// uint32 dev_port = 4;
inline void AlarmRequest::clear_dev_port() {
  dev_port_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 AlarmRequest::_internal_dev_port() const {
  return dev_port_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 AlarmRequest::dev_port() const {
  // @@protoc_insertion_point(field_get:audioalarm.v1.AlarmRequest.dev_port)
  return _internal_dev_port();
}
inline void AlarmRequest::_internal_set_dev_port(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  dev_port_ = value;
}
inline void AlarmRequest::set_dev_port(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_dev_port(value);
  // @@protoc_insertion_point(field_set:audioalarm.v1.AlarmRequest.dev_port)
}

// string user_name = 5;
inline void AlarmRequest::clear_user_name() {
  user_name_.ClearToEmpty();
}
inline const std::string& AlarmRequest::user_name() const {
  // @@protoc_insertion_point(field_get:audioalarm.v1.AlarmRequest.user_name)
  return _internal_user_name();
}
inline void AlarmRequest::set_user_name(const std::string& value) {
  _internal_set_user_name(value);
  // @@protoc_insertion_point(field_set:audioalarm.v1.AlarmRequest.user_name)
}
inline std::string* AlarmRequest::mutable_user_name() {
  // @@protoc_insertion_point(field_mutable:audioalarm.v1.AlarmRequest.user_name)
  return _internal_mutable_user_name();
}
inline const std::string& AlarmRequest::_internal_user_name() const {
  return user_name_.Get();
}
inline void AlarmRequest::_internal_set_user_name(const std::string& value) {
  
  user_name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void AlarmRequest::set_user_name(std::string&& value) {
  
  user_name_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:audioalarm.v1.AlarmRequest.user_name)
}
inline void AlarmRequest::set_user_name(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  user_name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:audioalarm.v1.AlarmRequest.user_name)
}
inline void AlarmRequest::set_user_name(const char* value,
    size_t size) {
  
  user_name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:audioalarm.v1.AlarmRequest.user_name)
}
inline std::string* AlarmRequest::_internal_mutable_user_name() {
  
  return user_name_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* AlarmRequest::release_user_name() {
  // @@protoc_insertion_point(field_release:audioalarm.v1.AlarmRequest.user_name)
  return user_name_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void AlarmRequest::set_allocated_user_name(std::string* user_name) {
  if (user_name != nullptr) {
    
  } else {
    
  }
  user_name_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), user_name,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:audioalarm.v1.AlarmRequest.user_name)
}

// string user_password = 6;
inline void AlarmRequest::clear_user_password() {
  user_password_.ClearToEmpty();
}
inline const std::string& AlarmRequest::user_password() const {
  // @@protoc_insertion_point(field_get:audioalarm.v1.AlarmRequest.user_password)
  return _internal_user_password();
}
inline void AlarmRequest::set_user_password(const std::string& value) {
  _internal_set_user_password(value);
  // @@protoc_insertion_point(field_set:audioalarm.v1.AlarmRequest.user_password)
}
inline std::string* AlarmRequest::mutable_user_password() {
  // @@protoc_insertion_point(field_mutable:audioalarm.v1.AlarmRequest.user_password)
  return _internal_mutable_user_password();
}
inline const std::string& AlarmRequest::_internal_user_password() const {
  return user_password_.Get();
}
inline void AlarmRequest::_internal_set_user_password(const std::string& value) {
  
  user_password_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void AlarmRequest::set_user_password(std::string&& value) {
  
  user_password_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:audioalarm.v1.AlarmRequest.user_password)
}
inline void AlarmRequest::set_user_password(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  user_password_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:audioalarm.v1.AlarmRequest.user_password)
}
inline void AlarmRequest::set_user_password(const char* value,
    size_t size) {
  
  user_password_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:audioalarm.v1.AlarmRequest.user_password)
}
inline std::string* AlarmRequest::_internal_mutable_user_password() {
  
  return user_password_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* AlarmRequest::release_user_password() {
  // @@protoc_insertion_point(field_release:audioalarm.v1.AlarmRequest.user_password)
  return user_password_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void AlarmRequest::set_allocated_user_password(std::string* user_password) {
  if (user_password != nullptr) {
    
  } else {
    
  }
  user_password_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), user_password,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:audioalarm.v1.AlarmRequest.user_password)
}

// string download_url = 7;
inline void AlarmRequest::clear_download_url() {
  download_url_.ClearToEmpty();
}
inline const std::string& AlarmRequest::download_url() const {
  // @@protoc_insertion_point(field_get:audioalarm.v1.AlarmRequest.download_url)
  return _internal_download_url();
}
inline void AlarmRequest::set_download_url(const std::string& value) {
  _internal_set_download_url(value);
  // @@protoc_insertion_point(field_set:audioalarm.v1.AlarmRequest.download_url)
}
inline std::string* AlarmRequest::mutable_download_url() {
  // @@protoc_insertion_point(field_mutable:audioalarm.v1.AlarmRequest.download_url)
  return _internal_mutable_download_url();
}
inline const std::string& AlarmRequest::_internal_download_url() const {
  return download_url_.Get();
}
inline void AlarmRequest::_internal_set_download_url(const std::string& value) {
  
  download_url_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void AlarmRequest::set_download_url(std::string&& value) {
  
  download_url_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:audioalarm.v1.AlarmRequest.download_url)
}
inline void AlarmRequest::set_download_url(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  download_url_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:audioalarm.v1.AlarmRequest.download_url)
}
inline void AlarmRequest::set_download_url(const char* value,
    size_t size) {
  
  download_url_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:audioalarm.v1.AlarmRequest.download_url)
}
inline std::string* AlarmRequest::_internal_mutable_download_url() {
  
  return download_url_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* AlarmRequest::release_download_url() {
  // @@protoc_insertion_point(field_release:audioalarm.v1.AlarmRequest.download_url)
  return download_url_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void AlarmRequest::set_allocated_download_url(std::string* download_url) {
  if (download_url != nullptr) {
    
  } else {
    
  }
  download_url_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), download_url,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:audioalarm.v1.AlarmRequest.download_url)
}

// string file_name = 8;
inline void AlarmRequest::clear_file_name() {
  file_name_.ClearToEmpty();
}
inline const std::string& AlarmRequest::file_name() const {
  // @@protoc_insertion_point(field_get:audioalarm.v1.AlarmRequest.file_name)
  return _internal_file_name();
}
inline void AlarmRequest::set_file_name(const std::string& value) {
  _internal_set_file_name(value);
  // @@protoc_insertion_point(field_set:audioalarm.v1.AlarmRequest.file_name)
}
inline std::string* AlarmRequest::mutable_file_name() {
  // @@protoc_insertion_point(field_mutable:audioalarm.v1.AlarmRequest.file_name)
  return _internal_mutable_file_name();
}
inline const std::string& AlarmRequest::_internal_file_name() const {
  return file_name_.Get();
}
inline void AlarmRequest::_internal_set_file_name(const std::string& value) {
  
  file_name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void AlarmRequest::set_file_name(std::string&& value) {
  
  file_name_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:audioalarm.v1.AlarmRequest.file_name)
}
inline void AlarmRequest::set_file_name(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  file_name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:audioalarm.v1.AlarmRequest.file_name)
}
inline void AlarmRequest::set_file_name(const char* value,
    size_t size) {
  
  file_name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:audioalarm.v1.AlarmRequest.file_name)
}
inline std::string* AlarmRequest::_internal_mutable_file_name() {
  
  return file_name_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* AlarmRequest::release_file_name() {
  // @@protoc_insertion_point(field_release:audioalarm.v1.AlarmRequest.file_name)
  return file_name_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void AlarmRequest::set_allocated_file_name(std::string* file_name) {
  if (file_name != nullptr) {
    
  } else {
    
  }
  file_name_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), file_name,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:audioalarm.v1.AlarmRequest.file_name)
}

// string md5_value = 9;
inline void AlarmRequest::clear_md5_value() {
  md5_value_.ClearToEmpty();
}
inline const std::string& AlarmRequest::md5_value() const {
  // @@protoc_insertion_point(field_get:audioalarm.v1.AlarmRequest.md5_value)
  return _internal_md5_value();
}
inline void AlarmRequest::set_md5_value(const std::string& value) {
  _internal_set_md5_value(value);
  // @@protoc_insertion_point(field_set:audioalarm.v1.AlarmRequest.md5_value)
}
inline std::string* AlarmRequest::mutable_md5_value() {
  // @@protoc_insertion_point(field_mutable:audioalarm.v1.AlarmRequest.md5_value)
  return _internal_mutable_md5_value();
}
inline const std::string& AlarmRequest::_internal_md5_value() const {
  return md5_value_.Get();
}
inline void AlarmRequest::_internal_set_md5_value(const std::string& value) {
  
  md5_value_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void AlarmRequest::set_md5_value(std::string&& value) {
  
  md5_value_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:audioalarm.v1.AlarmRequest.md5_value)
}
inline void AlarmRequest::set_md5_value(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  md5_value_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:audioalarm.v1.AlarmRequest.md5_value)
}
inline void AlarmRequest::set_md5_value(const char* value,
    size_t size) {
  
  md5_value_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:audioalarm.v1.AlarmRequest.md5_value)
}
inline std::string* AlarmRequest::_internal_mutable_md5_value() {
  
  return md5_value_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* AlarmRequest::release_md5_value() {
  // @@protoc_insertion_point(field_release:audioalarm.v1.AlarmRequest.md5_value)
  return md5_value_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void AlarmRequest::set_allocated_md5_value(std::string* md5_value) {
  if (md5_value != nullptr) {
    
  } else {
    
  }
  md5_value_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), md5_value,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:audioalarm.v1.AlarmRequest.md5_value)
}

// .audioalarm.v1.PlayTimeType play_time_type = 10;
inline void AlarmRequest::clear_play_time_type() {
  play_time_type_ = 0;
}
inline ::audioalarm::v1::PlayTimeType AlarmRequest::_internal_play_time_type() const {
  return static_cast< ::audioalarm::v1::PlayTimeType >(play_time_type_);
}
inline ::audioalarm::v1::PlayTimeType AlarmRequest::play_time_type() const {
  // @@protoc_insertion_point(field_get:audioalarm.v1.AlarmRequest.play_time_type)
  return _internal_play_time_type();
}
inline void AlarmRequest::_internal_set_play_time_type(::audioalarm::v1::PlayTimeType value) {
  
  play_time_type_ = value;
}
inline void AlarmRequest::set_play_time_type(::audioalarm::v1::PlayTimeType value) {
  _internal_set_play_time_type(value);
  // @@protoc_insertion_point(field_set:audioalarm.v1.AlarmRequest.play_time_type)
}

// uint32 play_time = 11;
inline void AlarmRequest::clear_play_time() {
  play_time_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 AlarmRequest::_internal_play_time() const {
  return play_time_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 AlarmRequest::play_time() const {
  // @@protoc_insertion_point(field_get:audioalarm.v1.AlarmRequest.play_time)
  return _internal_play_time();
}
inline void AlarmRequest::_internal_set_play_time(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  play_time_ = value;
}
inline void AlarmRequest::set_play_time(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_play_time(value);
  // @@protoc_insertion_point(field_set:audioalarm.v1.AlarmRequest.play_time)
}

// -------------------------------------------------------------------

// AlarmReply

// .audioalarm.v1.ResponseCode code = 1;
inline void AlarmReply::clear_code() {
  code_ = 0;
}
inline ::audioalarm::v1::ResponseCode AlarmReply::_internal_code() const {
  return static_cast< ::audioalarm::v1::ResponseCode >(code_);
}
inline ::audioalarm::v1::ResponseCode AlarmReply::code() const {
  // @@protoc_insertion_point(field_get:audioalarm.v1.AlarmReply.code)
  return _internal_code();
}
inline void AlarmReply::_internal_set_code(::audioalarm::v1::ResponseCode value) {
  
  code_ = value;
}
inline void AlarmReply::set_code(::audioalarm::v1::ResponseCode value) {
  _internal_set_code(value);
  // @@protoc_insertion_point(field_set:audioalarm.v1.AlarmReply.code)
}

// string message = 2;
inline void AlarmReply::clear_message() {
  message_.ClearToEmpty();
}
inline const std::string& AlarmReply::message() const {
  // @@protoc_insertion_point(field_get:audioalarm.v1.AlarmReply.message)
  return _internal_message();
}
inline void AlarmReply::set_message(const std::string& value) {
  _internal_set_message(value);
  // @@protoc_insertion_point(field_set:audioalarm.v1.AlarmReply.message)
}
inline std::string* AlarmReply::mutable_message() {
  // @@protoc_insertion_point(field_mutable:audioalarm.v1.AlarmReply.message)
  return _internal_mutable_message();
}
inline const std::string& AlarmReply::_internal_message() const {
  return message_.Get();
}
inline void AlarmReply::_internal_set_message(const std::string& value) {
  
  message_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void AlarmReply::set_message(std::string&& value) {
  
  message_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:audioalarm.v1.AlarmReply.message)
}
inline void AlarmReply::set_message(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  message_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:audioalarm.v1.AlarmReply.message)
}
inline void AlarmReply::set_message(const char* value,
    size_t size) {
  
  message_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:audioalarm.v1.AlarmReply.message)
}
inline std::string* AlarmReply::_internal_mutable_message() {
  
  return message_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* AlarmReply::release_message() {
  // @@protoc_insertion_point(field_release:audioalarm.v1.AlarmReply.message)
  return message_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void AlarmReply::set_allocated_message(std::string* message) {
  if (message != nullptr) {
    
  } else {
    
  }
  message_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), message,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:audioalarm.v1.AlarmReply.message)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace v1
}  // namespace audioalarm

PROTOBUF_NAMESPACE_OPEN

template <> struct is_proto_enum< ::audioalarm::v1::CameraType> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::audioalarm::v1::CameraType>() {
  return ::audioalarm::v1::CameraType_descriptor();
}
template <> struct is_proto_enum< ::audioalarm::v1::ResponseCode> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::audioalarm::v1::ResponseCode>() {
  return ::audioalarm::v1::ResponseCode_descriptor();
}
template <> struct is_proto_enum< ::audioalarm::v1::PlayTimeType> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::audioalarm::v1::PlayTimeType>() {
  return ::audioalarm::v1::PlayTimeType_descriptor();
}

PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_alarm_2eproto
